* GLboot roadmap
A list of ideas and objectives that I have with this project
** OpenGL API abstractions
- [X] Window and Context
  - [GLFW] GLFW or SDL2
- [-] Buffers
  - [-] VBOs
    - [X] Basic interface
    - [ ] glSubData filling option
    - [?] glMapBuffer
  - [-] VAOs
    - [X] Basic interface
    - [ ] Instance layout locations
  - [X] Basic buffer layouts
  - [X] EBOs
- [-] Textures
  - [X] 2D
  - [-] 3D
  - [X] Cubemaps
  - [-] Spritesheets/Atlas
- [-] Shaders
  - [X] Shader compiling
  - [X] Error handling
  - [X] Vertex and Fragment
  - [-] Geometry
  - [?] Compute
  - [-] Include extension
     Before compilation, parse the shader source and preprocess #include directives to allow better code reuse
- [X] Framebuffers
- [-] Instance rendering
- [?] Renderer interface
     Define instatiable renderers through a trait, maybe something like:
    #+BEGIN_SRC rust
pub trait Renderer {
    // Setup all state needed
    fn begin(&self);

    // Render everything, maybe in a queue or Scene struct/trait
    fn render(&self);

    // Return to the global, or previous, state
    fn finish(&self);
}
#+END_SRC
     I haven't seen any need to something like that, and I still need to refine the idea, so it's still in doubt.
- [X] Material System
** Model Loading
- [X] OBJ loader
  - [X] Material Loading
- [-] PLY loader
- [X] glTF loader
- [-] Multiple models in one call
  - [?] Parallel iterators or async functions
    : Need to implement and benchmark both approaches and decide the one to use
** [?] PBR
** ImGUI and general control
- [X] Setup ImGUI
- [-] Texture and Color selector
- [-] Mesh cycling
- [X] Mouse rotation
     Implement a Arcball rotations system to allow rotating the mesh with the mouse
- [?] Real time shader writing and compilation
     Implement a small editor in ImGUI to allow writing and compiling shaders, seeing their results in real time
** [?] Animation
- [?] Sprite animation
- [?] Skeletal animation
